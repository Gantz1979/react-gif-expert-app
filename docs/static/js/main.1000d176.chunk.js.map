{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoria","type","value","onChange","target","getGifts","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,0BAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAS,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAST,EACTU,SArBc,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCNhBG,EAAQ,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUR,GAF7C,8DAIDS,MAAMF,GAJL,cAIdG,EAJc,gBAKCA,EAAKC,OALN,uBAKbC,EALa,EAKbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAEnB,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZrB,kBAiBbM,GAjBa,4CAAH,sDCARO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKc,UAAW,0CACb,yBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,2BAAKA,KCHHO,EAAU,SAAC,GAAmB,IAAjBxB,EAAgB,EAAhBA,UAEtB,ECFwB,SAAEA,GAE1B,MAA0BR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEPvB,EAAUL,GACL6B,MAAM,SAAAC,GACHH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAItB,CAACzB,IAEG0B,EDjB0BK,CAAc/B,GAAlCkB,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAqCrB,GAEjDyB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACIiB,IAAQjB,EAAIC,IACPD,UEkBlBkB,EAhCM,WAEjB,MAAoCzC,mBAAU,CAAC,gBAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OAEI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEQ2C,EAAWpB,KAAK,SAACd,GAAD,OACZ,kBAAC,EAAD,CACIgC,IAAKhC,EACLA,UAAWA,U,MCnBvCmC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1000d176.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategorias} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n            setCategorias( categoria => [inputValue, ...categoria] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange= { handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifts = async( categoria ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=5&api_key=2AP5Hb85L1tx6G42KOXDlytkl1cBGkPx`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        \r\n        return  {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n\r\n    }); \r\n\r\n    return gifs;  //retorna una promesa que resuelve la colleccion de imagenes\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    return (\r\n        <div className= \"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={ title } />\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {categoria} ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( categoria );\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"animate__animated animate__fadeIn\">{categoria}</h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem \r\n                            key = { img.id}\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifts } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( categoria ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifts( categoria )\r\n            .then( imgs => {\r\n                setState( {\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n\r\n    }, [categoria]); //segundo argumento del useEfect es un arreglo de dependencias\r\n\r\n    return state; // {data:[], loading: true }\r\n}\r\n\r\n","\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState( ['Dragon Ball'] );\r\n    /* AGREGAR ELEMENTO AL ARREGLO\r\n    const handleAdd = () => {\r\n        //setCategorias([...categorias, 'CUATRO']); //Las 2 formas son validas.\r\n        setCategorias( cat => [...cat, 'CINCO']);    //=> setCategorias retorna un callback con el estado anterior\r\n    }\r\n    */\r\n\r\n    return(\r\n\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias = { setCategorias }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( (categoria) => (\r\n                        <GifGrid \r\n                            key={categoria}\r\n                            categoria={categoria} \r\n                        />\r\n                    ))\r\n                    \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import FormProducto from './components/FormProducto';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}